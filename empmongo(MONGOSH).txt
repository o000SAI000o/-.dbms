*CODE*:.............................run one command at a time..............................

use Employee

//Create collection emp1 using createCollection method:
db.createCollection("emp1")

//Insert 4 to 5 documents in emp1 collection with fields eno, ename, //address, sal:
db.emp1.insertMany([
    { eno: 1, ename: "John", address: "Street A", sal: 6000 },
    { eno: 2, ename: "Alice", address: "Street B", sal: 12000 },
    { eno: 3, ename: "Mark", address: "Street C", sal: 5000 },
    { eno: 4, ename: "Nina", address: "Street D", sal: 18000 },
    { eno: 5, ename: "Nick", address: "Street E", sal: 4000 }
])

//Display all documents in emp1:

db.emp1.find()

//Insert document by creating own ObjectId:

db.emp1.insertOne({ _id: ObjectId("64b85a75f3c97d9d0e4012b4"), eno: 6, ename: "Bob", address: "Street F", sal: 9000 })

//Display all employees having salary greater than 5000:

db.emp1.find({ sal: { $gt: 5000 } })

//Display all employees having salary less than 15000:

db.emp1.find({ sal: { $lt: 15000 } })

//Display all employees having salary greater than 10000 and less than 20000:
db.emp1.find({ sal: { $gt: 10000, $lt: 20000 } })

//Update salary of all employees by increasing it by 10%:
db.emp1.updateMany({}, { $mul: { sal: 1.1 } })

//Delete employees having salary less than 5000:
db.emp1.deleteMany({ sal: { $lt: 5000 } })

//Rename collection emp1 to employee1:
db.emp1.renameCollection("employee1")

//Display employees whose name starts with 'n':
db.employee1.find({ ename: { $regex: /^n/i } }).pretty()

//Sort employees by name in ascending order:
db.employee1.find().sort({ ename: 1 }).pretty()

//Create a new database with the name Employee1:
use Employee1

//Drop Employee1 database:
db.dropDatabase()

//Create collection emp1 using insert method:
db.emp1.insert({ eno: 7, ename: "Leo", address: "Street G", sal: 7000 })

//Drop collection emp1:
db.emp1.drop





*EXPLANATION*:

Here's a quick summary of the MongoDB code you shared:

Switch to Employee Database:

javascript
Copy code
use Employee
Switches to (or creates) the Employee database.
Create emp1 Collection:

javascript
Copy code
db.createCollection("emp1")
Creates a collection named emp1 in the Employee database.
Insert Documents into emp1 Collection:

javascript
Copy code
db.emp1.insertMany([
    { eno: 1, ename: "John", address: "Street A", sal: 6000 },
    { eno: 2, ename: "Alice", address: "Street B", sal: 12000 },
    { eno: 3, ename: "Mark", address: "Street C", sal: 5000 },
    { eno: 4, ename: "Nina", address: "Street D", sal: 18000 },
    { eno: 5, ename: "Nick", address: "Street E", sal: 4000 }
])
Inserts multiple employee records with fields like employee number, name, address, and salary.
Display All Documents:

javascript
Copy code
db.emp1.find()
Displays all records in the emp1 collection.
Insert a Document with Custom ObjectId:

javascript
Copy code
db.emp1.insertOne({ _id: ObjectId("64b85a75f3c97d9d0e4012b4"), eno: 6, ename: "Bob", address: "Street F", sal: 9000 })
Inserts a document with a specified _id for the employee.
Query Employees with Salary Conditions:

javascript
Copy code
db.emp1.find({ sal: { $gt: 5000 } })       // Salary > 5000
db.emp1.find({ sal: { $lt: 15000 } })      // Salary < 15000
db.emp1.find({ sal: { $gt: 10000, $lt: 20000 } }) // Salary between 10000 and 20000
Fetches documents based on salary conditions.
Update Salaries by 10%:

javascript
Copy code
db.emp1.updateMany({}, { $mul: { sal: 1.1 } })
Increases the sal field of all employees by 10%.
Delete Employees with Salary < 5000:

javascript
Copy code
db.emp1.deleteMany({ sal: { $lt: 5000 } })
Deletes records where sal is less than 5000.
Rename Collection to employee1:

javascript
Copy code
db.emp1.renameCollection("employee1")
Renames the emp1 collection to employee1.
Find Employees with Name Starting with 'n':

javascript
Copy code
db.employee1.find({ ename: { $regex: /^n/i } }).pretty()
Finds employees whose names start with 'n', ignoring case sensitivity.
Sort Employees by Name (Ascending):

javascript
Copy code
db.employee1.find().sort({ ename: 1 }).pretty()
Displays employees in ascending order by ename.
Create and Drop New Database:

javascript
Copy code
use Employee1   // Create and switch to Employee1
db.dropDatabase() // Drops Employee1 database
Insert into emp1 with insert:

javascript
Copy code
db.emp1.insert({ eno: 7, ename: "Leo", address: "Street G", sal: 7000 })
Creates the emp1 collection (if it doesnâ€™t exist) by inserting a single document.
Drop emp1 Collection:

javascript
Copy code
db.emp1.drop()
Deletes the emp1 collection completely.
This code snippet covers creating, modifying, querying, and deleting data in MongoDB. It also demonstrates how to work with collections, databases, and handle document fields.






concept:


The concept behind the provided MongoDB code revolves around performing basic **CRUD operations** (Create, Read, Update, Delete) on a MongoDB database and collection. Below is an explanation of the key concepts:

### 1. **Database and Collection Management:**
   - **Creating a Collection:**
     ```javascript
     db.createCollection("emp1")
     ```
     - This command explicitly creates a collection named `emp1` in the current database. MongoDB creates collections implicitly when you insert documents, but you can also create them manually when needed.

   - **Switching Databases:**
     ```javascript
     use Employee1
     ```
     - The `use` command switches to the specified database (`Employee1`). If the database does not exist, MongoDB will create it when data is inserted.

   - **Renaming a Collection:**
     ```javascript
     db.emp1.renameCollection("employee1")
     ```
     - This renames the `emp1` collection to `employee1`.

   - **Dropping a Collection/Database:**
     ```javascript
     db.emp1.drop()
     db.dropDatabase()
     ```
     - `drop()` removes a collection and all of its data, while `dropDatabase()` removes the entire database, including all collections within it.

### 2. **CRUD Operations:**

   - **Create:**
     - **Inserting Documents:**
       ```javascript
       db.emp1.insertMany([...])
       db.emp1.insertOne({...})
       ```
       - `insertMany()` is used to insert multiple documents at once, while `insertOne()` is used to insert a single document. The documents in this case represent employee records (with fields like `eno`, `ename`, `address`, and `sal`).

     - **Inserting with a Custom ObjectId:**
       ```javascript
       db.emp1.insertOne({ _id: ObjectId("64b85a75f3c97d9d0e4012b4"), ... })
       ```
       - MongoDB automatically generates an `_id` field for each document. However, in this case, a custom ObjectId is inserted using the `ObjectId()` function.

   - **Read:**
     - **Querying Documents:**
       ```javascript
       db.emp1.find({ sal: { $gt: 5000 } })
       db.emp1.find({ sal: { $lt: 15000 } })
       ```
       - `find()` is used to retrieve documents based on query filters. For example, it filters employees based on their salary.

     - **Using Regular Expressions:**
       ```javascript
       db.employee1.find({ ename: { $regex: /^n/i } }).pretty()
       ```
       - You can use `$regex` to match documents where a field matches a specific pattern. In this case, it finds employees whose names (`ename`) start with "n" (case-insensitive).

     - **Sorting:**
       ```javascript
       db.employee1.find().sort({ ename: 1 }).pretty()
       ```
       - Sorting documents based on a field (here, `ename` in ascending order) can be done using the `sort()` method. `1` indicates ascending order, while `-1` would indicate descending order.

   - **Update:**
     - **Updating Documents:**
       ```javascript
       db.emp1.updateMany({}, { $mul: { sal: 1.1 } })
       ```
       - `updateMany()` is used to update multiple documents. In this case, it increases the `sal` (salary) of all employees by 10% using the `$mul` operator (which multiplies the existing value by the specified factor).

   - **Delete:**
     - **Deleting Documents:**
       ```javascript
       db.emp1.deleteMany({ sal: { $lt: 5000 } })
       ```
       - `deleteMany()` deletes all documents that match a specified condition (in this case, employees whose salary is less than 5000).

### 3. **Advanced Queries:**
   - **Comparison Operators:**
     MongoDB supports various comparison operators for filtering data, such as:
     - `$gt` (greater than), `$lt` (less than), `$gte` (greater than or equal to), `$lte` (less than or equal to), and `$eq` (equal to).
     Example:
     ```javascript
     db.emp1.find({ sal: { $gt: 10000, $lt: 20000 } })
     ```
     - This finds employees whose salary is between 10000 and 20000.

### 4. **Use of ObjectId:**
   - The ObjectId is a unique identifier automatically assigned to each document by MongoDB. However, developers can manually create ObjectIds when inserting documents, as shown in the code:
   ```javascript
   db.emp1.insertOne({ _id: ObjectId("64b85a75f3c97d9d0e4012b4"), ... })
   ```

### 5. **Aggregation and Filtering:**
   - MongoDB allows advanced filtering using regular expressions (`$regex`) and sorting documents based on fields.
   - You can also perform complex aggregations (though not shown in your example) like summing salaries, grouping employees by department, etc.

### Key Concepts Recap:
1. **Database and Collection Operations** - Creating, switching, renaming, and dropping databases and collections.
2. **CRUD Operations** - Inserting, querying, updating, and deleting documents.
3. **Queries with Filters** - Using comparison operators and regular expressions to filter data.
4. **Aggregation** - While not explicitly shown in your example, MongoDB supports powerful aggregation frameworks for complex queries.
5. **ObjectId** - Automatically generated or manually created unique identifiers for each document.

The overall concept is to manage employee data in a MongoDB database, perform queries based on salary and name, update employee salaries, and manage the collection's structure.

