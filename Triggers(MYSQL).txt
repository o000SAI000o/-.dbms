*CODE*:

CREATE DATABASE library_system;
USE library_system;

create table library(book_id int primary key, book_name varchar(25), author varchar(25));
create table library_backup(backup_id int auto_increment primary key, book_id int,book_name varchar(25), author varchar(25), action varchar(25)); 

Delimiter $$
create trigger before_update
before update on library
for each row 
begin
	insert into library_backup(book_id ,book_name, author , action) values (old.book_id, old.book_name, old.author, 'UPDATE');
end;
$$
Delimiter ;

Delimiter $$
create trigger before_delete
before delete on library
for each row 
begin
	insert into library_backup(book_id ,book_name, author , action) values (old.book_id, old.book_name, old.author, 'DELETE');
end;
$$
Delimiter ;

Delimiter $$
create trigger after_insert
before insert on library
for each row 
begin
	insert into library_backup(book_id ,book_name, author , action) values (new.book_id, new.book_name, new.author, 'INSERT');
end;
$$
Delimiter ;


*Test the Triggers*:

You can now test the triggers by performing some operations (insert, update, delete) on the library table and checking the library_backup table.

Insert a new book:
Code:
-------------------------------------------------------------------------------------------
INSERT INTO library (book_id, book_name, author) VALUES (1, 'The Great Gatsby', 'F. Scott Fitzgerald');
-------------------------------------------------------------------------------------------

Check the library_backup table to see the inserted record:
Code:
-------------------------------------------------------------------------------------------

SELECT * FROM library_backup;
-------------------------------------------------------------------------------------------


Update a book:
Code:
-------------------------------------------------------------------------------------------

SELECT * FROM library_backup;
-------------------------------------------------------------------------------------------

Check the backup again:
Code:
-------------------------------------------------------------------------------------------

SELECT * FROM library_backup;
-------------------------------------------------------------------------------------------

Delete a book:
Code:
-------------------------------------------------------------------------------------------

DELETE FROM library WHERE book_id = 1;
-------------------------------------------------------------------------------------------

Check the backup one last time:
Code:
-------------------------------------------------------------------------------------------

SELECT * FROM library_backup;
-------------------------------------------------------------------------------------------

After running the code, you can reset the delimiter back to semicolon (;) if you're using it temporarily with DELIMITER $$:
Code:
-------------------------------------------------------------------------------------------
DELIMITER ;
-------------------------------------------------------------------------------------------

EXPLANATION:

Hereâ€™s a concise explanation of the code:

1. Table Definitions
library table: Stores information about books, with columns for book_id, book_name, and author.
library_backup table: Keeps a record of changes (insert, update, delete) to the library table, with columns for book_id, book_name, author, and the type of action (INSERT, UPDATE, or DELETE).
2. Triggers
Triggers are special procedures that automatically execute in response to changes in the library table.

before_update Trigger: Before updating any record in the library table, this trigger inserts the old data into library_backup with an action labeled 'UPDATE'.

before_delete Trigger: Before deleting a record from the library table, this trigger inserts the old data into library_backup with an action labeled 'DELETE'.

after_insert Trigger: Before inserting a new record into the library table, this trigger inserts the new data into library_backup with an action labeled 'INSERT'.

Purpose:
These triggers help maintain a backup of changes made to the library table, recording the action type (insert, update, or delete) and the book details into the library_backup table.
In short, the code ensures that any changes in the library table are automatically logged in library_backup with an action label for tracking purposes.



concept:



The concept behind the provided code involves **triggers** and **data backup** in a relational database system (in this case, MySQL). The purpose of the code is to ensure that whenever records in the `library` table are inserted, updated, or deleted, a corresponding log of these actions is automatically recorded in a backup table (`library_backup`). This is crucial for tracking changes and ensuring that historical data can be retrieved if needed.

### Key Concepts:

1. **Database Creation and Structure**:
   - A **database** called `library_system` is created to store information about books in a library.
   - Two **tables** are created:
     - `library`: Contains book records with details like `book_id`, `book_name`, and `author`.
     - `library_backup`: A backup table to record any changes (INSERT, UPDATE, DELETE) made to the `library` table. It includes `backup_id` (auto-increment primary key), `book_id`, `book_name`, `author`, and an `action` column that specifies the type of action (INSERT, UPDATE, DELETE).

2. **Triggers**:
   Triggers are special stored procedures that are automatically executed in response to certain events (INSERT, UPDATE, DELETE) on a table. In this code, three triggers are defined for the `library` table:
   
   - **`before_update` Trigger**:
     - Executed **before** an update operation on the `library` table.
     - It inserts a backup of the record (before the update) into the `library_backup` table with the action `'UPDATE'`. This allows for auditing and tracking of changes to book records.
     - Example:
       ```sql
       INSERT INTO library_backup(book_id, book_name, author, action)
       VALUES (OLD.book_id, OLD.book_name, OLD.author, 'UPDATE');
       ```
     - The `OLD` keyword refers to the values of the record **before** the update.

   - **`before_delete` Trigger**:
     - Executed **before** a delete operation on the `library` table.
     - It inserts a backup of the deleted record into the `library_backup` table with the action `'DELETE'`.
     - Example:
       ```sql
       INSERT INTO library_backup(book_id, book_name, author, action)
       VALUES (OLD.book_id, OLD.book_name, OLD.author, 'DELETE');
       ```
     - The `OLD` keyword refers to the values of the record **before** deletion.

   - **`after_insert` Trigger**:
     - Executed **after** an insert operation on the `library` table.
     - It inserts the newly inserted record into the `library_backup` table with the action `'INSERT'`.
     - Example:
       ```sql
       INSERT INTO library_backup(book_id, book_name, author, action)
       VALUES (NEW.book_id, NEW.book_name, NEW.author, 'INSERT');
       ```
     - The `NEW` keyword refers to the values of the record **after** insertion.

3. **Why Triggers Are Used**:
   - **Automation**: Triggers automatically log actions without requiring manual intervention, ensuring that no changes to the `library` table go unrecorded.
   - **Data Integrity**: The backup table maintains a history of changes made to the `library` table, which is useful for auditing, rollback, or recovery.
   - **Tracking Changes**: By logging the type of action (INSERT, UPDATE, DELETE), you can track what changes were made to each book record over time.

4. **Data Backup Mechanism**:
   - The `library_backup` table serves as a **backup** of all changes made to the `library` table. It stores:
     - The book's details before any modification (in the case of updates or deletes).
     - The book's details after insertion (for new records).
     - The action that was performed (INSERT, UPDATE, DELETE).
   - This ensures that a history of changes to the library system is maintained for auditing purposes or future restoration.

### Example Scenario:

Imagine you have a `library` table with the following book records:

| book_id | book_name      | author         |
|---------|----------------|----------------|
| 1       | "Database 101" | "John Doe"     |
| 2       | "MySQL Basics" | "Jane Smith"   |

Now, let's consider the following actions:
1. **Insert** a new book: A new book `"SQL Advanced"` by `"Alice"` is added.
   - The `after_insert` trigger inserts this record into the `library_backup` table with the action `'INSERT'`.
   
2. **Update** a book: The author of `"Database 101"` is changed to `"John A. Doe"`.
   - The `before_update` trigger backs up the old record (before the update) into the `library_backup` table with the action `'UPDATE'`.

3. **Delete** a book: The book `"MySQL Basics"` is deleted from the library.
   - The `before_delete` trigger backs up the deleted record into the `library_backup` table with the action `'DELETE'`.

After these operations, the `library_backup` table will have records like:

| backup_id | book_id | book_name      | author        | action |
|-----------|---------|----------------|---------------|--------|
| 1         | 1       | "Database 101" | "John Doe"    | UPDATE |
| 2         | 2       | "MySQL Basics" | "Jane Smith"  | DELETE |
| 3         | 3       | "SQL Advanced" | "Alice"       | INSERT |

This way, you have a backup of every action that has affected the `library` table, ensuring data consistency and providing an audit trail.

### Summary:
- The code creates a system to track and back up changes to book records in the `library` table.
- Triggers automatically capture **inserts**, **updates**, and **deletes** on the `library` table and store these changes in the `library_backup` table.
- This system ensures that you have an historical log of changes for auditing, recovery, or version control purposes.







