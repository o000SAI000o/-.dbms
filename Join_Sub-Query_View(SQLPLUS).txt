CODE:

CREATE DATABASE ASSIGN1;
USE ASSIGN1;

CREATE TABLE Employee (
    employee_name VARCHAR2(50) PRIMARY KEY,
    city VARCHAR2(50),
    street VARCHAR2(100)
);

CREATE TABLE Works (
    employee_name VARCHAR2(50),
    company_name VARCHAR2(100),
    salary NUMBER,
    FOREIGN KEY (employee_name) REFERENCES Employee(employee_name)
);

CREATE TABLE Company (
    company_name VARCHAR2(100) PRIMARY KEY,
    city VARCHAR2(50)
);

CREATE TABLE Manages (
    employee_name VARCHAR2(50),
    manager_name VARCHAR2(50),
    FOREIGN KEY (employee_name) REFERENCES Employee(employee_name),
    FOREIGN KEY (manager_name) REFERENCES Employee(employee_name)
);

INSERT INTO Employee (employee_name, city, street) 
VALUES ('Alice', 'New York', '5th Avenue');

INSERT INTO Employee (employee_name, city, street) 
VALUES ('Bob', 'San Francisco', 'Market Street');

INSERT INTO Employee (employee_name, city, street) 
VALUES ('Charlie', 'Los Angeles', 'Sunset Blvd');

INSERT INTO Employee (employee_name, city, street) 
VALUES ('Jones', 'Chicago', 'Lake Shore Drive');

INSERT INTO Works (employee_name, company_name, salary) 
VALUES ('Alice', 'First Bank Corporation', 12000);

INSERT INTO Works (employee_name, company_name, salary) 
VALUES ('Bob', 'First Bank Corporation', 9500);

INSERT INTO Works (employee_name, company_name, salary) 
VALUES ('Charlie', 'Small Bank Corporation', 11000);

INSERT INTO Works (employee_name, company_name, salary) 
VALUES ('Jones', 'First Bank Corporation', 10000);

INSERT INTO Company (company_name, city) 
VALUES ('First Bank Corporation', 'New York');

INSERT INTO Company (company_name, city) 
VALUES ('Small Bank Corporation', 'San Francisco');

INSERT INTO Manages (employee_name, manager_name) 
VALUES ('Bob', 'Alice');

INSERT INTO Manages (employee_name, manager_name) 
VALUES ('Charlie', 'Jones');

SELECT * FROM Employee;
SELECT * FROM Works;
SELECT * FROM Company;
SELECT * FROM Manages;

SELECT employee_name
FROM Works
WHERE company_name = 'First Bank Corporation';

SELECT e.employee_name, e.city
FROM Employee e
JOIN Works w ON e.employee_name = w.employee_name
WHERE w.company_name = 'First Bank Corporation';

JOIN Works w ON e.employee_name = w.employee_name
WHERE w.company_name = 'First Bank Corporation' AND w.salary > 10000;

SELECT e.employee_name, e.city
FROM Employee e
JOIN Works w ON e.employee_name = w.employee_name
JOIN Company c ON w.company_name = c.company_name
WHERE e.city = c.city;

SELECT e.employee_name
FROM Employee e
JOIN Works w ON e.employee_name = w.employee_name
JOIN Manages m ON e.employee_name = m.employee_name
JOIN Employee manager ON m.manager_name = manager.employee_name
WHERE e.city = manager.city AND e.street = manager.street;

SELECT employee_name
FROM Works
WHERE company_name != 'First Bank Corporation';

SELECT employee_name
FROM Works w1
WHERE w1.salary > ALL (
    SELECT salary
    FROM Works w2
    WHERE w2.company_name = 'Small Bank Corporation'
);

SELECT company_name
FROM Company c
WHERE NOT EXISTS (
    SELECT city
    FROM Company
    WHERE company_name = 'Small Bank Corporation'
    AND city NOT IN (SELECT city FROM Company WHERE company_name = c.company_name)
);

SELECT e.employee_name, e.company_name
FROM Works w
JOIN Employee e ON w.employee_name = e.employee_name
WHERE w.salary > (
    SELECT AVG(salary)
    FROM Works
    WHERE company_name = w.company_name
);

SELECT company_name
FROM Works
GROUP BY company_name
ORDER BY COUNT(employee_name) DESC
LIMIT 1;

SELECT company_name
FROM Works
GROUP BY company_name
ORDER BY SUM(salary) ASC
LIMIT 1;

SELECT company_name
FROM Works
GROUP BY company_name
HAVING AVG(salary) > (
    SELECT AVG(salary)
    FROM Works
    WHERE company_name = 'First Bank Corporation'
);

UPDATE Employee
SET city = 'Newtown'
WHERE employee_name = 'Jones';

UPDATE Works
SET salary = salary * 1.10
WHERE company_name = 'First Bank Corporation';

DELETE FROM Works
WHERE company_name = 'Small Bank Corporation';




EXPLANATION:

Here's a more detailed explanation of the SQL code:

### 1. **Database and Table Creation:**
   - **Database Creation:**
     - `CREATE DATABASE ASSIGN1;` creates a new database called **ASSIGN1**.
     - `USE ASSIGN1;` switches to using this database for further operations.
   
   - **Tables Creation:**
     - **Employee** table: Stores information about employees, including their name, city, and street address.
       - The `employee_name` field is the **primary key**, ensuring each employee has a unique name.
     - **Works** table: Tracks which employees work at which companies and their salary.
       - `employee_name` is a foreign key that references the **Employee** table.
     - **Company** table: Stores information about companies, such as their name and the city they are located in.
       - The `company_name` field is the **primary key**, ensuring each company is uniquely identified.
     - **Manages** table: Tracks the manager-employee relationship within the company.
       - Both `employee_name` and `manager_name` are foreign keys referencing the **Employee** table.

### 2. **Inserting Data:**
   - Data is inserted into the **Employee**, **Works**, **Company**, and **Manages** tables to populate the database with sample employee and company data:
     - Employees are added with names, cities, and street addresses.
     - The **Works** table connects employees to companies and their salary details.
     - The **Company** table holds details of the companies, such as the city where the company is located.
     - The **Manages** table defines which employee manages which other employee (manager-employee relationship).

### 3. **SELECT Queries:**
   The `SELECT` queries are used to retrieve data from the database. Here are some of the key queries:

   - **Employee Names Working for 'First Bank Corporation':**
     - `SELECT employee_name FROM Works WHERE company_name = 'First Bank Corporation';`
     - Retrieves the names of all employees who work at the "First Bank Corporation".

   - **Employee Details with 'First Bank Corporation':**
     - `SELECT e.employee_name, e.city FROM Employee e JOIN Works w ON e.employee_name = w.employee_name WHERE w.company_name = 'First Bank Corporation';`
     - This query retrieves the employee name and city for all employees working at "First Bank Corporation". It uses an `INNER JOIN` between the **Employee** and **Works** tables to match employees to their companies.

   - **Employees Living in the Same City as Their Company:**
     - `SELECT e.employee_name, e.city FROM Employee e JOIN Works w ON e.employee_name = w.employee_name JOIN Company c ON w.company_name = c.company_name WHERE e.city = c.city;`
     - This query joins three tables: **Employee**, **Works**, and **Company**. It retrieves employees who live in the same city where their company is located.

   - **Employees Living on the Same Street as Their Manager:**
     - `SELECT e.employee_name FROM Employee e JOIN Works w ON e.employee_name = w.employee_name JOIN Manages m ON e.employee_name = m.employee_name JOIN Employee manager ON m.manager_name = manager.employee_name WHERE e.city = manager.city AND e.street = manager.street;`
     - This query retrieves employees who live on the same street as their manager, using a `JOIN` between **Employee**, **Works**, **Manages**, and **Employee** (for the manager details).

   - **Employees Not Working for 'First Bank Corporation':**
     - `SELECT employee_name FROM Works WHERE company_name != 'First Bank Corporation';`
     - Retrieves the names of employees who are not working for "First Bank Corporation".

   - **Employees Earning More Than Each Employee at 'Small Bank Corporation':**
     - `SELECT employee_name FROM Works w1 WHERE w1.salary > ALL (SELECT salary FROM Works w2 WHERE w2.company_name = 'Small Bank Corporation');`
     - This query compares the salary of employees at any company to the salaries of employees at "Small Bank Corporation". It retrieves employees who earn more than every employee in that company.

   - **Companies Located in the Same Cities as 'Small Bank Corporation':**
     - `SELECT company_name FROM Company c WHERE NOT EXISTS (SELECT city FROM Company WHERE company_name = 'Small Bank Corporation' AND city NOT IN (SELECT city FROM Company WHERE company_name = c.company_name));`
     - This query finds companies located in all the cities where "Small Bank Corporation" is located. It uses a `NOT EXISTS` clause to compare cities between the companies.

   - **Employees Earning More Than the Average Salary in Their Company:**
     - `SELECT e.employee_name, e.company_name FROM Works w JOIN Employee e ON w.employee_name = e.employee_name WHERE w.salary > (SELECT AVG(salary) FROM Works WHERE company_name = w.company_name);`
     - This query retrieves employees who earn more than the average salary at their respective company. It uses a subquery to calculate the average salary for each company.

   - **Company with the Most Employees:**
     - `SELECT company_name FROM Works GROUP BY company_name ORDER BY COUNT(employee_name) DESC LIMIT 1;`
     - This query finds the company with the highest number of employees by grouping records by company and counting the number of employees.

   - **Company with the Smallest Payroll:**
     - `SELECT company_name FROM Works GROUP BY company_name ORDER BY SUM(salary) ASC LIMIT 1;`
     - This query finds the company with the smallest total payroll by grouping records by company and summing the salaries.

   - **Companies with Higher Average Salaries Than 'First Bank Corporation':**
     - `SELECT company_name FROM Works GROUP BY company_name HAVING AVG(salary) > (SELECT AVG(salary) FROM Works WHERE company_name = 'First Bank Corporation');`
     - This query finds companies where the average salary is higher than that at "First Bank Corporation".

### 4. **Update & Delete Queries:**
   - **Update City of 'Jones' to 'Newtown':**
     - `UPDATE Employee SET city = 'Newtown' WHERE employee_name = 'Jones';`
     - This updates the city of the employee "Jones" to "Newtown".

   - **Give a 10% Raise to Employees at 'First Bank Corporation':**
     - `UPDATE Works SET salary = salary * 1.10 WHERE company_name = 'First Bank Corporation';`
     - This increases the salary by 10% for all employees working at "First Bank Corporation".

   - **Delete Employees Working at 'Small Bank Corporation':**
     - `DELETE FROM Works WHERE company_name = 'Small Bank Corporation';`
     - This deletes all records from the **Works** table where employees work at "Small Bank Corporation".

### Summary:
This SQL code provides a comprehensive example of managing employee, company, and work-related data. It:
- Defines tables for employees, their works, companies, and managers.
- Inserts sample data for employees, companies, and their relationships.
- Uses `SELECT` queries to retrieve and filter data based on various conditions.
- Demonstrates the use of `JOIN`, subqueries, aggregation, and conditional filtering.
- Includes `UPDATE` and `DELETE` operations to modify and clean up data. 

These operations form the backbone of an employee and company management system, allowing for efficient querying and modification of relational data.

concept:



The concept behind this SQL code is to model a relational database system that manages employee, company, and managerial information. By using normalized tables and relationships, the database can efficiently store, retrieve, and manipulate data regarding employees, the companies they work for, their salaries, and the hierarchy of management. Here’s the foundational concept broken down:

---

### 1. **Relational Database Structure**

The design uses **relational database principles** by splitting data into four related tables: `Employee`, `Works`, `Company`, and `Manages`. Each table has a specific purpose, ensuring that data is organized without redundancy:

- **Employee Table**: Stores basic details about employees, such as their names, cities, and addresses.
- **Works Table**: Stores details of each employee’s job, including their salary and the company they work for. This table connects employees to companies, allowing the database to track employment data independently of other employee details.
- **Company Table**: Stores information about companies, specifically the company name and city.
- **Manages Table**: Defines hierarchical relationships between employees and managers. This structure supports querying management relationships within the organization.

This approach uses **primary keys** (unique identifiers for each record, like `employee_name` in the `Employee` table) and **foreign keys** (fields that reference primary keys in other tables, such as `employee_name` in `Works` and `Manages`) to establish relationships between the tables.

---

### 2. **Data Integrity and Referential Integrity**

By using foreign keys, this database enforces **referential integrity**—ensuring that relationships between tables remain consistent. For example:

- The `Works` table’s `employee_name` field is a foreign key that references the `Employee` table. This means that an employee must first exist in the `Employee` table before they can be associated with a company in the `Works` table.
- The `Manages` table requires both `employee_name` and `manager_name` to be present in the `Employee` table, ensuring only valid employees can be managers or subordinates.

This structure maintains data consistency by preventing invalid references between tables.

---

### 3. **SQL Queries and Data Retrieval**

The queries in this code demonstrate how SQL can retrieve and manipulate related data across multiple tables:

- **Simple Data Retrieval**: Basic `SELECT` statements retrieve lists of employees, their associated companies, or salary details.
- **Complex Joins and Conditions**: The queries utilize `JOIN` operations to retrieve related data across tables. For example:
  - Queries like `JOIN Employee` and `Works` provide insights into which employees work at a specific company.
  - `JOIN` with conditions allows retrieval of employees living in the same city as their company or those managed by a person in the same neighborhood.
- **Aggregation and Filtering**: Some queries use `GROUP BY`, `HAVING`, and aggregate functions (`AVG`, `SUM`, etc.) to find information like the company with the highest payroll or the highest average salary.

### 4. **Data Modification**

The script includes `UPDATE` and `DELETE` statements to modify data:

- **UPDATE**: Used to change data values, such as giving a 10% salary raise to employees or updating an employee’s city.
- **DELETE**: Removes data, for example, deleting employees who work at "Small Bank Corporation." These statements allow for maintaining and updating records as real-world data changes.

---

### 5. **Normalization and Efficiency**

This design follows **normalization** principles to reduce redundancy and improve data efficiency. By separating employees, job roles, and company information into distinct tables, it avoids storing duplicate data (e.g., company names) and simplifies maintenance (e.g., a single update to a company’s city applies everywhere). It also enhances query performance by allowing SQL to quickly join smaller tables rather than searching through large, redundant data sets.

---

### Summary

In summary, this code demonstrates relational database design with tables linked by primary and foreign keys, enforcing data integrity and making complex data relationships manageable. By using SQL operations for retrieval and modification, the database can efficiently handle business questions regarding employee roles, salaries, and organizational structures, maintaining clear and consistent relationships across all stored data.
