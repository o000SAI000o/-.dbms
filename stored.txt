5th ass

-- Table to store student marks
CREATE TABLE Stud_Marks (
    Roll NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Total_marks NUMBER
);

-- Table to store student result with classification
CREATE TABLE Result (
    Roll NUMBER,
    Name VARCHAR2(50),
    Class VARCHAR2(20),
    PRIMARY KEY (Roll)
);

INSERT INTO Stud_Marks VALUES (101, 'Alice', 1020);
INSERT INTO Stud_Marks VALUES (102, 'Bob', 950);
INSERT INTO Stud_Marks VALUES (103, 'Charlie', 870);
INSERT INTO Stud_Marks VALUES (104, 'David', 800);
INSERT INTO Stud_Marks VALUES (105, 'Eva', 1400);


CREATE OR REPLACE PROCEDURE proc_Grade(p_roll IN NUMBER) AS
    v_name VARCHAR2(50);
    v_total_marks NUMBER;
    v_class VARCHAR2(20);
BEGIN
    -- Fetch the student's name and marks from Stud_Marks table
    SELECT Name, Total_marks INTO v_name, v_total_marks
    FROM Stud_Marks
    WHERE Roll = p_roll;

    -- Determine the class based on total marks
    IF v_total_marks >= 990 AND v_total_marks <= 1500 THEN
        v_class := 'Distinction';
    ELSIF v_total_marks BETWEEN 900 AND 989 THEN
        v_class := 'First Class';
    ELSIF v_total_marks BETWEEN 825 AND 899 THEN
        v_class := 'Higher Second Class';
    ELSE
        v_class := 'Pass';
    END IF;

    -- Insert the result into the Result table
    INSERT INTO Result (Roll, Name, Class)
    VALUES (p_roll, v_name, v_class);

    DBMS_OUTPUT.PUT_LINE('Record inserted for Roll: ' || p_roll || ' with Class: ' || v_class);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: No student found with Roll: ' || p_roll);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END proc_Grade;
/
call proc_Grade(105);

