

1.................................Create Tables Borrower...................................

*CODE*:

-- Creating the Borrower table
CREATE TABLE Borrower (
    Roll_no       NUMBER PRIMARY KEY,
    Name          VARCHAR2(50),
    DateofIssue   DATE,
    NameofBook    VARCHAR2(100),
    Status        CHAR(1) CHECK (Status IN ('I', 'R')) -- 'I' for Issued, 'R' for Returned
);


2.................................Create Tables Fine.......................................

*CODE*:

-- Creating the Fine table with corrected column name for Date
CREATE TABLE Fine (
    Roll_no       NUMBER,
    FineDate      DATE,   -- Changed from Date to FineDate to avoid using reserved word
    Amt           NUMBER,
    CONSTRAINT fk_roll_no FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)
);

3.................................Insert values............................................

*CODE*:

-- Inserting sample data into the Borrower table
INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (12, 'Vishwa', TO_DATE('2024-10-01', 'YYYY-MM-DD'), 'Data Science Handbook', 'I');

INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (15, 'Krushna', TO_DATE('2024-10-10', 'YYYY-MM-DD'), 'Machine Learning Basics', 'I');

INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (29, 'Yash', TO_DATE('2024-10-20', 'YYYY-MM-DD'), 'Deep Learning Guide', 'I');

4......................................PL/SQL CODE........................................

*CODE*:

DECLARE
    -- Variable declarations
    v_roll_no   Borrower.Roll_no%TYPE := &Roll_no;           -- Prompt once for Roll_no
    v_nameofbook Borrower.NameofBook%TYPE := '&NameofBook';  -- Prompt once for NameofBook
    v_dateofissue Borrower.DateofIssue%TYPE;
    v_days_late NUMBER;
    v_fine_amt  NUMBER := 0;

    -- Named exception declaration
    e_no_record_found EXCEPTION;

BEGIN
    -- Retrieve the DateofIssue for the given Roll_no and NameofBook
    SELECT DateofIssue
    INTO v_dateofissue
    FROM Borrower
    WHERE Roll_no = v_roll_no
      AND NameofBook = v_nameofbook;

    -- Calculate the number of days since the book was issued
    v_days_late := TRUNC(SYSDATE - v_dateofissue);

    -- Determine fine amount based on the number of days late
    IF v_days_late BETWEEN 15 AND 30 THEN
        v_fine_amt := v_days_late * 5;
    ELSIF v_days_late > 30 THEN
        v_fine_amt := (30 * 5) + ((v_days_late - 30) * 50);
    ELSE
        v_fine_amt := 0; -- No fine for days less than 15
    END IF;

    -- Update the book status to 'R' if the book is returned
    UPDATE Borrower
    SET Status = 'R'
    WHERE Roll_no = v_roll_no
      AND NameofBook = v_nameofbook;

    -- If there is a fine, insert a record in the Fine table
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, FineDate, Amt)
        VALUES (v_roll_no, SYSDATE, v_fine_amt);
    END IF;

    -- Success message
    DBMS_OUTPUT.PUT_LINE('Book returned successfully. Fine amount: ' || v_fine_amt);

EXCEPTION
    -- Handle case where no record is found
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for given Roll_no and NameofBook.');

    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);

END;
/

*NOTE*:

Example Scenarios
Input Roll_no = 12 and NameofBook = 'Data Science Handbook', issued 40 days ago:

Fine = 650 (30 days at Rs. 5 + 10 days at Rs. 50)
Output:
mathematica
Copy code
Book returned successfully. Fine amount: 500
Input Roll_no = 15 and NameofBook = 'Machine Learning Basics', issued 10 days ago:

No fine as it's less than 15 days.
Output:
mathematica
Copy code
Book returned successfully. Fine amount: 90
Input Roll_no = 29 and NameofBook = 'Deep Learning Guide':

No matching record, so NO_DATA_FOUND exception.
Output:
csharp
Copy code
No record found for given Roll_no and NameofBook.
This summary should cover the main outcomes youâ€™d see when running the PL/SQL block.

EXPLANATION:

This code involves several parts: creating tables, inserting data, and implementing a PL/SQL block to manage book borrowing, fines, and updates.

### 1. **Creating the Borrower Table**
```sql
CREATE TABLE Borrower (
    Roll_no       NUMBER PRIMARY KEY,
    Name          VARCHAR2(50),
    DateofIssue   DATE,
    NameofBook    VARCHAR2(100),
    Status        CHAR(1) CHECK (Status IN ('I', 'R')) -- 'I' for Issued, 'R' for Returned
);
```
- **Purpose**: This table stores details about book borrowers.
- **Columns**:
  - `Roll_no`: A unique number for each borrower (Primary Key).
  - `Name`: Name of the borrower.
  - `DateofIssue`: The date the book was issued.
  - `NameofBook`: The name of the borrowed book.
  - `Status`: A character column indicating whether the book is 'I' (Issued) or 'R' (Returned). A `CHECK` constraint ensures that only these values are valid.

### 2. **Creating the Fine Table**
```sql
CREATE TABLE Fine (
    Roll_no       NUMBER,
    FineDate      DATE,   -- Changed from Date to FineDate to avoid using reserved word
    Amt           NUMBER,
    CONSTRAINT fk_roll_no FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)
);
```
- **Purpose**: This table stores information about fines for overdue books.
- **Columns**:
  - `Roll_no`: The borrower's ID, referencing the `Roll_no` in the `Borrower` table.
  - `FineDate`: The date the fine was imposed.
  - `Amt`: The amount of the fine.
  - A `FOREIGN KEY` constraint ensures that the `Roll_no` in the `Fine` table must match a `Roll_no` in the `Borrower` table.

### 3. **Inserting Sample Data**
```sql
-- Inserting sample data into the Borrower table
INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (12, 'Vishwa', TO_DATE('2024-10-01', 'YYYY-MM-DD'), 'Data Science Handbook', 'I');

INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (15, 'Krushna', TO_DATE('2024-10-10', 'YYYY-MM-DD'), 'Machine Learning Basics', 'I');

INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) 
VALUES (29, 'Yash', TO_DATE('2024-10-20', 'YYYY-MM-DD'), 'Deep Learning Guide', 'I');
```
- **Purpose**: Inserts sample data into the `Borrower` table.
- Each `INSERT` statement adds a record for a borrower, including their `Roll_no`, `Name`, `DateofIssue`, `NameofBook`, and `Status`.

### 4. **PL/SQL Code to Calculate Fines and Return Books**
```sql
DECLARE
    -- Variable declarations
    v_roll_no   Borrower.Roll_no%TYPE := &Roll_no;           -- Prompt once for Roll_no
    v_nameofbook Borrower.NameofBook%TYPE := '&NameofBook';  -- Prompt once for NameofBook
    v_dateofissue Borrower.DateofIssue%TYPE;
    v_days_late NUMBER;
    v_fine_amt  NUMBER := 0;

    -- Named exception declaration
    e_no_record_found EXCEPTION;

BEGIN
    -- Retrieve the DateofIssue for the given Roll_no and NameofBook
    SELECT DateofIssue
    INTO v_dateofissue
    FROM Borrower
    WHERE Roll_no = v_roll_no
      AND NameofBook = v_nameofbook;

    -- Calculate the number of days since the book was issued
    v_days_late := TRUNC(SYSDATE - v_dateofissue);

    -- Determine fine amount based on the number of days late
    IF v_days_late BETWEEN 15 AND 30 THEN
        v_fine_amt := v_days_late * 5;
    ELSIF v_days_late > 30 THEN
        v_fine_amt := (30 * 5) + ((v_days_late - 30) * 50);
    ELSE
        v_fine_amt := 0; -- No fine for days less than 15
    END IF;

    -- Update the book status to 'R' if the book is returned
    UPDATE Borrower
    SET Status = 'R'
    WHERE Roll_no = v_roll_no
      AND NameofBook = v_nameofbook;

    -- If there is a fine, insert a record in the Fine table
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, FineDate, Amt)
        VALUES (v_roll_no, SYSDATE, v_fine_amt);
    END IF;

    -- Success message
    DBMS_OUTPUT.PUT_LINE('Book returned successfully. Fine amount: ' || v_fine_amt);

EXCEPTION
    -- Handle case where no record is found
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for given Roll_no and NameofBook.');

    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);

END;
```
- **Purpose**: This PL/SQL block handles the return of books, calculates fines for late returns, and updates the database.
  
- **Steps**:
  1. **Variable Declarations**: 
     - `v_roll_no`: The borrower's roll number.
     - `v_nameofbook`: The name of the borrowed book.
     - `v_dateofissue`: The date the book was issued.
     - `v_days_late`: The number of days the book is overdue.
     - `v_fine_amt`: The fine to be calculated.
  
  2. **Fetching Data**: 
     - The `SELECT` statement retrieves the `DateofIssue` of the specified book based on the `Roll_no` and `NameofBook`.
  
  3. **Calculating the Fine**:
     - If the book is between 15 and 30 days overdue, the fine is `5` per day.
     - If the book is more than 30 days overdue, the fine is calculated as `(30 * 5) + ((days - 30) * 50)`.
     - If the book is returned within 15 days, no fine is charged.

  4. **Updating the Book Status**: 
     - The book status is updated to 'R' (Returned) after the fine is calculated.

  5. **Inserting the Fine**:
     - If there is any fine, an entry is added to the `Fine` table with the `Roll_no`, current date (`SYSDATE`), and fine amount.

  6. **Exceptions**:
     - If no matching record is found (`NO_DATA_FOUND`), an error message is displayed.
     - Any other unexpected errors are caught using `WHEN OTHERS`.

### Summary
- **Table Creation**: The `Borrower` and `Fine` tables are created to store information about the borrowers, books, and fines.
- **Data Insertion**: Sample records are inserted into the `Borrower` table to simulate borrowing activities.
- **PL/SQL Block**: A PL/SQL block is written to:
  1. Fetch details of the book borrowed by a specific student.
  2. Calculate fines based on overdue days.
  3. Update the status of the borrowed book to 'Returned'.
  4. Insert fine records into the `Fine` table if applicable.
  5. Handle errors gracefully with exception handling.

Let me know if you'd like any further clarification!



concept:

The concept behind the above code involves managing a library system where books are borrowed, returned, and fines are calculated based on the delay in returning the books. Here's a detailed breakdown of the core concepts:

### 1. **Table Design**
The code involves creating two tables: **`Borrower`** and **`Fine`**, which store the information about borrowed books and fines, respectively. Here's a breakdown of these tables and their columns:

#### **Borrower Table**
- **Roll_no**: This is the unique identifier for each student (primary key). It helps track which student has borrowed a book.
- **Name**: The student's name.
- **DateofIssue**: The date when the book was issued to the student.
- **NameofBook**: The title of the book borrowed.
- **Status**: A character that indicates whether the book is still "Issued" (`I`) or has been "Returned" (`R`). The `CHECK` constraint ensures only these two values are allowed.

#### **Fine Table**
- **Roll_no**: The student's roll number. It links to the `Borrower` table via a foreign key.
- **FineDate**: The date when the fine was imposed (for late return).
- **Amt**: The fine amount imposed based on the late return.
- The foreign key constraint ensures that fines can only be applied to valid `Roll_no` values from the `Borrower` table.

### 2. **Inserting Data into Tables**
The `INSERT` statements are used to add sample data into both the `Borrower` and `Fine` tables:
- The `Borrower` table is populated with details of students who have borrowed books, including the date of issue and the book's status (`I` for Issued).
- The `Fine` table is later populated when students are fined for late returns, but the insertion happens within the PL/SQL block if a fine is calculated.

### 3. **PL/SQL Block for Fine Calculation**
This part of the code performs the main operations related to fine calculation and updating the book's status when it is returned. The process is as follows:

#### Declarations:
- **v_roll_no**: This is a variable that stores the student's roll number, which is input by the user when running the PL/SQL block.
- **v_nameofbook**: This stores the title of the book, also input by the user.
- **v_dateofissue**: This will hold the date when the book was issued, fetched from the `Borrower` table.
- **v_days_late**: This stores the number of days by which the book is late.
- **v_fine_amt**: This stores the calculated fine amount, initialized to `0` and updated based on the late days.

#### **Retrieving Issue Date:**
- A `SELECT INTO` query fetches the `DateofIssue` from the `Borrower` table for the given student and book name. This date is used to calculate the number of days the book has been kept by the student.

#### **Fine Calculation:**
- The number of days the book is late is calculated as `TRUNC(SYSDATE - v_dateofissue)`. 
  - If the book is returned **between 15 and 30 days late**, a fine of `5` per day is imposed.
  - If the book is **more than 30 days late**, the fine is calculated as `30 * 5` for the first 30 days, and then `50` for each additional day.
  - If the book is returned **on time or within 15 days**, no fine is charged.

#### **Updating the Status:**
- The bookâ€™s **status** is updated from `'I'` (Issued) to `'R'` (Returned) when the book is returned, using the `UPDATE` statement.

#### **Inserting Fine Record:**
- If a fine is calculated (i.e., `v_fine_amt > 0`), the fine details (studentâ€™s `Roll_no`, current date as `FineDate`, and the calculated `Amt`) are inserted into the `Fine` table.

#### **Success Message:**
- A message is printed using `DBMS_OUTPUT.PUT_LINE` to show the user whether the book was returned successfully and the amount of the fine (if any).

#### **Exception Handling:**
- The `EXCEPTION` block is used to handle errors:
  - **`NO_DATA_FOUND`**: This exception is raised if no matching records are found for the given `Roll_no` and `NameofBook`, and a corresponding message is displayed.
  - **`OTHERS`**: This catches all other exceptions and provides an error message using `SQLERRM`, which returns the error description.

### 4. **Key Concepts in the Code**

#### a. **Data Retrieval with `SELECT INTO`**:
- The `SELECT INTO` statement is used to retrieve a single value from a table and store it in a variable. Itâ€™s commonly used when you expect a single record and want to assign its value to a variable for further processing.

#### b. **Date Calculations**:
- The `SYSDATE` function returns the current date and time, and `TRUNC(SYSDATE - v_dateofissue)` computes the difference in days between the current date and the issue date. This is key for calculating how many days the book is overdue.

#### c. **Conditional Logic (IF-ELSEIF)**:
- The code uses an `IF-ELSEIF` block to check the number of late days and apply different fine rates accordingly. This demonstrates how to apply business logic based on conditions.

#### d. **Exception Handling**:
- The `NO_DATA_FOUND` and `OTHERS` exceptions ensure that the code gracefully handles cases where no data is found or when any unexpected errors occur, preventing crashes and providing meaningful messages to users.

#### e. **Foreign Key Constraints**:
- The foreign key relationship between `Fine` and `Borrower` ensures that fines can only be imposed for books that exist in the `Borrower` table, enforcing referential integrity.

### 5. **Use Case Example**
- If a student with `Roll_no = 12` returns the book "Data Science Handbook" 20 days late, the system will calculate the fine, update the status of the book to 'R', and insert a fine record into the `Fine` table.
- If a user tries to return a book that doesn't exist in the system (no matching `Roll_no` or `NameofBook`), an exception will be raised, and the appropriate error message will be shown.

### Summary:
This PL/SQL block is designed to automate the process of returning books, calculating fines for late returns, and updating the relevant database tables (`Borrower` and `Fine`). It demonstrates how to handle database records, perform date calculations, and manage exceptions in PL/SQL effectively.

